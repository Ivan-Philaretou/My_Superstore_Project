-- 0. Import Sample_Superstore_Seed_Data_Cleaned.csv into Table called seed_data
-- Note: Make sure they are the correct Data Types when Importing especially [Postal_Code] AS Type: VARCHAR2.
--       Also, make them all Not Null.

-- 1. Create Calendars Table
CREATE TABLE calendars (
    date_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    fulldate DATE UNIQUE,
    day NUMBER(2,0) NOT NULL,
    month NUMBER(2,0) NOT NULL,
    quarter NUMBER(1,0) NOT NULL,
    year NUMBER(4,0) NOT NULL,
    PRIMARY KEY(date_id)
);

-- 1.1 Run 2_GenerateCalendarDates_Proc Procedure to Insert Data

-- Test 
SELECT 
    year, 
    COUNT(*) AS Days_per_Year, 
    COUNT(DISTINCT fulldate) AS Distinct_Days_per_Year
FROM 
    calendars
GROUP BY 
    year
ORDER BY 
    year;

-- 2. Create Customer Table
CREATE TABLE customers(
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR2(25) NOT NULL,
    last_name VARCHAR2(30) NOT NULL,
    full_name VARCHAR2(100) NOT NULL,
    PRIMARY KEY(customer_id)
);

-- Insert Data into the Customer Table
INSERT INTO customers (first_name, last_name, full_name)
WITH t1 AS (
    SELECT DISTINCT customer_name
    FROM seed_data
    WHERE customer_name IS NOT NULL
    ORDER BY customer_name
)
SELECT
    COALESCE(SUBSTR(customer_name, 1, INSTR(customer_name, ' ') - 1), 'Unknown') AS first_name,
    COALESCE(TRIM(SUBSTR(customer_name, INSTR(customer_name, ' '))), 'Unknown') AS last_name,
    customer_name AS full_name
FROM 
    t1;

-- Test
SELECT 
    Count(*)AS Count, 
    COUNT(DISTINCT customer_id) AS Distinct_Count
FROM 
    customers;

-- 2.1 Create a First_Names Table
CREATE TABLE first_names(
    firstname_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR2(25) NOT NULL UNIQUE,
    PRIMARY KEY(firstname_id)
);

-- 2.2 Create a Last_Names Table
CREATE TABLE last_names(
    lastname_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    last_name VARCHAR2(25) NOT NULL UNIQUE,
    PRIMARY KEY(lastname_id)
);

-- 2.3 Insert Data via 3_Insert_Names

-- 2.4 Run 4_GenerateNames_Func Function

-- 2.4 Run 5_GenerateNames_Proc Procedure to Insert New Generate Names

-- Test
SELECT 
    COUNT(*)AS Count, 
    COUNT(DISTINCT customer_id) AS Distinct_Count
FROM 
    customers;

-- 3. Create an Address Table with Distinct List of Postal Codes Per City, State, Country, Region.
CREATE TABLE address(
    postal_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    postal_code VARCHAR2(30) NOT NULL,
    city VARCHAR2(30) NOT NULL,
    state VARCHAR2(30) NOT NULL,
    region VARCHAR2(30) NOT NULL,
    country VARCHAR2(30) NOT NULL,
    PRIMARY KEY (postal_id)
);

-- Insert Data into the Address Table
INSERT INTO address
(
  postal_code,
  city,
  state,
  region,
  country
)
SELECT DISTINCT 
  postal_code AS postal_code,
  city AS city,
  state AS state,
  region AS region,
  country AS country
FROM seed_data
ORDER BY postal_code, city, dtate, region, country;

-- Test 1
SELECT 
    COUNT(postal_code), 
    COUNT(DISTINCT postal_code)
FROM 
    address;

-- Test 2
SELECT 
    *
FROM 
    address
ORDER BY 
    postal_id;

-- 3.1  Create a Customer_Address Table which will contain 2 columns (customer_id, postal_id) to work as a bridge.
CREATE TABLE customer_address(
    customer_id NUMBER(11) NOT NULL,
    postal_id NUMBER(11) NOT NULL,
    CONSTRAINT pk_customer_address PRIMARY KEY (customer_id)
);

-- 3.2 Run 6_Customer_Address_Proc

-- Test 1
SELECT 
    DISTINCT *
FROM 
    customer_address
ORDER BY 
    customer_id;

-- Test 2
SELECT 
    postal_id, 
    COUNT(customer_id) AS Number_of_Residents
FROM 
    customer_address
GROUP BY 
    postal_id
ORDER BY 
    postal_id;

-- 4. Create a Products Table with the Distinct List of Category, Sub_Category, Product_Name.
CREATE TABLE products(
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    category VARCHAR2(30) NOT NULL,
    sub_category VARCHAR2(30) NOT NULL,
    product_name VARCHAR2(200) NOT NULL,
    PRIMARY KEY (product_id)
);

-- Insert Data into the Products Table
INSERT INTO products
(
  category,
  sub_category,
  product_name
)
SELECT DISTINCT 
  category AS category,
  sub_category AS sub_category,
  product_name AS product_name
FROM 
    seed_data
ORDER BY 
    category,
    sub_category,
    product_name;

-- Test
SELECT 
    DISTINCT *
FROM 
    products
ORDER BY 
    product_id;

-- 5. Create a Product_Orig_Price Table which will be the Master Price/Cost List Per Product

CREATE TABLE product_orig_price AS
SELECT 
    product_name, 
    AVG(ROUND((discount) * (sales/quantity) + (sales/quantity), 2)) AS unit_price,
    AVG(ROUND((discount) * (sales/quantity) + (sales/quantity) - (profit/quantity), 2)) AS cost_price
FROM 
    seed_data
GROUP BY 
    product_name
ORDER BY 
    product_name;

-- Make Product_Name the Primary Key
ALTER TABLE product_orig_price
ADD CONSTRAINT pk_product_orig_price PRIMARY KEY (product_name);

-- Test 1
SELECT 
    COUNT(DISTINCT product_name)
FROM 
    product_orig_price;

-- Test 2
SELECT 
    DISTINCT *
FROM 
    product_orig_price
ORDER BY 
    product_name;

-- 6. Create a Product_Prices Table
-- Create a 6 years of Product Price Increase Table WITH RANDOM INCREASE OF 0 TO 10 %

CREATE TABLE product_prices (
    product_price_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    product_id NUMBER(11),
    pricing_date DATE,
    product_name VARCHAR2(200) NOT NULL,
    product_unit_price NUMBER(10,2) NOT NULL,
    product_cost_price NUMBER(10,2) NOT NULL,
    PRIMARY KEY (product_price_id)
);

-- 6.1 Must First Insert Data into Table with Original Prices/Costs for the 1st year
INSERT INTO product_prices
(
    product_id,
    pricing_date,
    product_name,
    product_unit_price,
    product_cost_price
)
SELECT
    pr.product_id,
    TO_DATE('2010-01-01', 'YYYY-MM-DD') as pricing_date,
    p.product_name,
    p.unit_price as product_unit_price,
    p.cost_price as product_cost_price
FROM
    product_orig_price p
JOIN
    products pr ON p.product_name = pr.product_name
ORDER BY product_id;

-- Test 1
SELECT 
    COUNT(DISTINCT product_name)
FROM 
    product_prices;

-- Test 2
SELECT 
    DISTINCT *
FROM 
    product_prices
ORDER BY 
    product_price_id;

-- 6.2 Run 7_GenerateProductPrices_Proc

-- Test 1
SELECT 
    pricing_date, 
    COUNT(DISTINCT product_id)
FROM 
    product_prices
GROUP BY 
    pricing_date
ORDER BY 
    pricing_date;

-- Test 2
SELECT 
    pricing_date, 
    product_name, 
    product_unit_price, 
    product_cost_price
FROM 
    product_prices
-- where product_name = '3.6 Cubic Foot Counter Height Office Refrigerator'
ORDER BY  
    product_name, 
    pricing_date;

-- 7. Create Ship_Mode Table
CREATE TABLE ship_modes (
    ship_mode_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    ship_mode VARCHAR2(20) NOT NULL
);

-- Insert Data into Ship_Mode Table
INSERT INTO ship_modes
(
  ship_mode
)
SELECT DISTINCT 
  ship_mode AS ship_mode
FROM 
    seed_data
WHERE 
    ship_mode != 'Same Day'
ORDER BY 
    ship_mode;

-- 8. Create orders Table
CREATE TABLE initial_orders (
    order_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    order_date DATE NOT NULL,
    ship_mode VARCHAR2(20) NOT NULL,
    ship_date DATE,
    customer_id NUMBER NOT NULL,
    postal_id NUMBER NOT NULL,
    product_id NUMBER NOT NULL,
    product_price_id NUMBER NOT NULL,
    product_unit_price NUMBER NOT NULL,
    product_cost_price NUMBER NOT NULL,
    product_discount_percentage NUMBER NOT NULL,
    product_discount_amount NUMBER NOT NULL,
    product_discounted_unit_price NUMBER NOT NULL,
    quantity NUMBER NOT NULL,
    total_discount_amount NUMBER NOT NULL,
    total_unit_amount NUMBER NOT NULL,
    gross_profit_unit_amount NUMBER NOT NULL,
    total_discounted_unit_amount NUMBER NOT NULL,
    gross_profit_discounted_unit_amount NUMBER NOT NULL,
    PRIMARY KEY (order_id)
);

-- 8.1 Run 8_GenerateOrders_Proc
-- Warning: It took me over 15 hours (1 year = around 2 hours 30 minutes) to generate 6 years worth of order data on my PC.

-- Check 1
SELECT 
    COUNT(*)
FROM 
    initial_orders;

-- Check 2
SELECT 
    *
FROM 
    initial_orders
WHERE 
    TO_CHAR(order_date, 'YYYY') = 2015
ORDER BY 
    order_id;

-- Test 1
SELECT 
    order_date, 
    COUNT(order_id)
FROM 
    initial_orders
WHERE 
    TO_CHAR(order_date, 'YYYY') = 2014
GROUP BY 
    order_date
ORDER BY 
    order_date;

-- Test 2
SELECT 
    TO_CHAR(order_date, 'MM') AS Months, 
    COUNT(order_id)
FROM 
    initial_orders
WHERE 
    TO_CHAR(order_date, 'YYYY') = 2014
GROUP BY 
    TO_CHAR(order_date, 'MM')
ORDER BY 
    TO_CHAR(order_date, 'MM');

-- Test 3
SELECT 
    TO_CHAR(order_date, 'YYYY') AS year, 
    COUNT(*)
FROM 
    initial_orders
GROUP BY 
    TO_CHAR(order_date, 'YYYY')
ORDER BY 
    TO_CHAR(order_date, 'YYYY');

-- 8.2 Export Orders Table to [orders.csv] and Place it into [Updating_Order_Keys] Folder
-- Reason: Couldn't Manage to get the Order_Key Updated as I the way I wanted it to be.
-- However, I did manage to accomplish this through python using panadas.

-- 8.3 Open either the Updating_Order_Keys.ipynb or Updating_Order_Keys.py

-- 8.3.1 And Run either of them. Both should export an updated_orders.csv file.

-- 8.4 Import updated_orders.csv to updated_orders Table
-- Note: Make sure they are the correct Data Types when Importing especially Dates.
--       Also, make them all Not Null.

-- 9. Create Superstore_Datamart_2015 Table
CREATE TABLE superstore_datamart_2015 (
    retail_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    order_id NUMBER NOT NULL UNIQUE, -- orders & ship info
    order_keys NUMBER NOT NULL,
    order_date DATE NOT NULL,
    ship_mode VARCHAR2(20) NOT NULL,
    ship_date DATE NOT NULL,
    customer_id NUMBER NOT NULL, -- customers
    first_name VARCHAR2(25) NOT NULL,
    last_name VARCHAR2(30) NOT NULL,
    full_name VARCHAR2(100) NOT NULL,
    postal_id NUMBER NOT NULL, -- address
    postal_code VARCHAR2(30) NOT NULL,
    city VARCHAR2(30) NOT NULL,
    state VARCHAR2(30) NOT NULL,
    region VARCHAR2(30) NOT NULL,
    country VARCHAR2(30) NOT NULL,
    product_id NUMBER NOT NULL, -- products
    category VARCHAR2(30) NOT NULL,
    sub_category VARCHAR2(30) NOT NULL,
    product_name VARCHAR2(200) NOT NULL,
    product_price_id NUMBER NOT NULL, -- product pricing
    product_unit_price NUMBER NOT NULL,
    product_cost_price NUMBER NOT NULL,
    product_discount_percentage NUMBER NOT NULL,
    product_discount_amount NUMBER NOT NULL,
    product_discounted_unit_price NUMBER NOT NULL,
    quantity NUMBER NOT NULL,
    total_discount_amount NUMBER NOT NULL,
    total_unit_amount NUMBER NOT NULL,
    gross_profit_unit_amount NUMBER NOT NULL,
    total_discounted_unit_amount NUMBER NOT NULL,
    gross_profit_discounted_unit_amount NUMBER NOT NULL,
    PRIMARY KEY (retail_id)
);

-- Insert Data into the superstore_datamart_2015 Table
INSERT INTO superstore_datamart_2015
(
    order_id,  -- orders & ship info
    order_keys,
    order_date,
    ship_mode,
    ship_date,
    customer_id,  -- customers
    first_name,
    last_name,
    full_name,
    postal_id, -- address
    postal_code,
    city,
    state,
    region,
    country,
    product_id, -- products
    category,
    sub_category,
    product_name,
    product_price_id, -- product pricing
    product_unit_price,
    product_cost_price,
    product_discount_percentage,
    product_discount_amount,
    product_discounted_unit_price,
    quantity,
    total_discount_amount,
    total_unit_amount,
    gross_profit_unit_amount,
    total_discounted_unit_amount,
    gross_profit_discounted_unit_amount
)
SELECT
    od.order_id AS order_id,
    od.order_keys AS order_keys,
    od.order_date AS order_date,
    od.ship_mode AS ship_mode,
    od.ship_date AS ship_date,
    od.customer_id AS customer_id,
    c.first_name AS first_name,
    c.last_name AS last_name,
    c.full_name AS full_name,
    od.postal_id AS postal_id,
    a.postal_code AS postal_code,
    a.city AS city,
    a.state AS state,
    a.region AS region,
    a.country AS country,
    od.product_id AS product_id,
    p.category AS category,
    p.sub_category AS sub_category,
    p.product_name AS product_name,
    od.product_price_id AS product_price_id,
    od.product_unit_price AS product_unit_price,
    od.product_cost_price AS product_cost_price,
    od.product_discount_percentage AS product_discount_percentage,
    od.product_discount_amount AS product_discount_amount,
    od.product_discounted_unit_price AS product_discounted_sales_amount,
    od.quantity AS quantity,
    od.total_discount_amount AS total_discount_amount,
    od.total_unit_amount AS total_unit_amount,
    od.gross_profit_unit_amount AS gross_profit_unit_amount,
    od.total_discounted_unit_amount AS total_discounted_unit_amount,
    od.gross_profit_discounted_unit_amount AS gross_profit_discounted_unit_amount
FROM
    updated_orders od
    INNER JOIN customers c ON od.customer_id = c.customer_id
    INNER JOIN address a ON od.postal_id = a.postal_id
    INNER JOIN products p ON od.product_id = p.product_id
ORDER BY od.order_id;


-- 10. Create daily_product_summary Table
-- Daily Summary of all the measures that are in the superstore_datamart_2015 
-- In other words, to see Stock Levels, also known as Inventory Levels
-- Aggregate(group) by order_date, product_id, category, sub_category, product_name

CREATE TABLE daily_product_summary AS 
SELECT 
    order_date,
    product_id,
    category,
    sub_category,
    product_name,
    SUM(product_unit_price) AS product_unit_price,
    SUM(product_cost_price) AS product_cost_price,
    SUM(product_discount_percentage) AS product_discount_percentage,
    SUM(product_discount_amount) AS product_discount_amount,
    SUM(product_discounted_unit_price) AS product_discounted_unit_price,
    SUM(quantity) AS quantity,
    SUM(total_discount_amount) AS total_discount_amount,
    SUM(total_unit_amount) AS total_unit_amount,
    SUM(gross_profit_unit_amount) AS gross_profit_unit_amount,
    SUM(total_discounted_unit_amount) AS total_discounted_unit_amount,
    SUM(gross_profit_discounted_unit_amount) AS gross_profit_discounted_unit_amount 
FROM
    superstore_datamart_2015
GROUP BY 
    order_date, 
    product_id, 
    category, 
    sub_category, 
    product_name
ORDER BY
    order_date, 
    product_id;

-- Insert a record for every product_id for every day 
-- Note: make sure you don't insert records for products that already exist in the table for that specific day
INSERT INTO daily_product_summary (
    order_date,
    product_id,
    category,
    sub_category,
    product_name,
    product_unit_price,
    product_cost_price,
    product_discount_percentage,
    product_discount_amount,
    product_discounted_unit_price,
    quantity,
    total_discount_amount,
    total_unit_amount,
    gross_profit_unit_amount,
    total_discounted_unit_amount,
    gross_profit_discounted_unit_amount
)
SELECT 
    C.fulldate AS order_date,
    O.product_id,
    O.category,
    O.sub_category,
    O.product_name,
    0 AS product_unit_price,
    0 AS product_cost_price,
    0 AS product_discount_percentage,
    0 AS product_discount_amount,
    0 AS product_discounted_unit_price,
    0 AS quantity,
    0 AS total_discount_amount,
    0 AS total_unit_amount,
    0 AS gross_profit_unit_amount,
    0 AS total_discounted_unit_amount,
    0 AS gross_profit_discounted_unit_amount
FROM 
    products O,
    calendars C
WHERE 
    NOT EXISTS (
        SELECT 1 
        FROM daily_product_summary D 
        WHERE D.order_date = C.fulldate 
        AND D.product_id = O.product_id
    )
ORDER BY 
    order_date, 
    product_id;

-- Conclusion
-- You are done Congratsulations.
-- Best to Export the superstore_datamart_2015 and daily_product_summary Tables
-- To share or to make data visualisations on your preferred tool.
